#!/usr/bin/env sh
# -*- mode: sh; tab-width: 4; indent-tabs-mode: nil; -*-
# -------------------------------------------------------------------------------------------------
# Copyright (c) 2020 Marcus Geelnard
#
# This software is provided 'as-is', without any express or implied warranty. In no event will the
# authors be held liable for any damages arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose, including commercial
# applications, and to alter it and redistribute it freely, subject to the following restrictions:
#
#  1. The origin of this software must not be misrepresented; you must not claim that you wrote
#     the original software. If you use this software in a product, an acknowledgment in the
#     product documentation would be appreciated but is not required.
#
#  2. Altered source versions must be plainly marked as such, and must not be misrepresented as
#     being the original software.
#
#  3. This notice may not be removed or altered from any source distribution.
# -------------------------------------------------------------------------------------------------

# Get current script location (all VM implementations are next to it).
d="$(dirname "$0")"
[ "$(printf '%s' "$d" | cut -c1)" = "/" ] || d="$PWD/${d#./}"

# First try using TinyCC to run the C version of the VM implementation.
c="$(command -v tcc)"; if [ -n "$c" ]; then "$c" -run "$d/bsvm.c" "$@"; exit $?; fi

# Try to compile the C VM and store the result in a per-user compilation cache.
# Note: It seems like a bad idea to allow root/sudo to create cache files, so we don't.
case "$(uname)" in
    Darwin*)
        h=md5
        ho=-r
        cdir="$HOME/Library/Caches/bs"
        ;;
    *)
        h=md5sum
        ho=
        cdir="${XDG_CACHE_HOME:-$HOME/.cache}/bs"
        ;;
esac
if command -v $h >/dev/null && [ "$(id -u)" != "0" ]; then
    # Find a supported C compiler.
    for x in gcc clang cc; do
        c="$(command -v $x)"
        if [ -n "$c" ]; then break; fi
    done

    if [ -n "$c" ]; then
        # Determine name of the cache entry (i.e. the executable file).
        e="$cdir/bsvm.$($h $ho "$d/bsvm.c" | cut -c1-32)"

        # If we have a cache miss, try to build the VM using the selected compiler.
        if [ ! -f "$e" ]; then
            mkdir -p "$cdir"
            t="$e.$$"
            # TODO(m): This may fail or require user interaction on macOS with Xcode command line
            # tools (since they may require the user to accept a license).
            "$c" -O2 -o "$t" "$d/bsvm.c" 2>/dev/null >/dev/null && mv "$t" "$e"
            rm -f "$t"

            # Clean out cache entries that are older than 7 days.
            if command -v find >/dev/null && [ -d "$cdir" ]; then
                find "$cdir" -mtime +7 -type f -delete 2>/dev/null >/dev/null
            fi
        fi

        # Execute the compiled VM if it can be found in the cache.
        if [ -f "$e" ]; then
            "$e" "$@"
            exit $?
        fi
    fi
fi

# Try Python (Python2 is generally faster than Python3).
for x in python2 python3 python; do
  c="$(command -v $x)"; if [ -n "$c" ]; then "$c" "$d/bsvm.py" "$@"; exit $?; fi
done

# If, by accident, the system has PowerShell installed...
for x in pwsh powershell; do
  c="$(command -v $x)"; if [ -n "$c" ]; then "$c" -noprofile -executionpolicy bypass -file "$d/bsvm.ps1" "$@"; exit $?; fi
done

# Last resort: Use a shell script interpreter. The bash script has been tailored to work with both
# bash and zsh. Since zsh seems to be the faster of the two, use it when it's available.
c="$(command -v zsh)"; if [ -n "$c" ]; then "$c" "$d/bsvm.bash" "$@"; exit $?; fi
c="$(command -v bash)"; if [ -n "$c" ]; then "$c" "$d/bsvm.bash" "$@"; exit $?; fi

# If we got this far, we have no working VM implementation for this system.
echo "***ERROR: No BS VM found"
exit 1
