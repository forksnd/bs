#!/usr/bin/env sh
# -*- mode: sh; tab-width: 4; indent-tabs-mode: nil; -*-
# -------------------------------------------------------------------------------------------------
# Copyright (c) 2020 Marcus Geelnard
#
# This software is provided 'as-is', without any express or implied warranty. In no event will the
# authors be held liable for any damages arising from the use of this software.
#
# Permission is granted to anyone to use this software for any purpose, including commercial
# applications, and to alter it and redistribute it freely, subject to the following restrictions:
#
#  1. The origin of this software must not be misrepresented; you must not claim that you wrote
#     the original software. If you use this software in a product, an acknowledgment in the
#     product documentation would be appreciated but is not required.
#
#  2. Altered source versions must be plainly marked as such, and must not be misrepresented as
#     being the original software.
#
#  3. This notice may not be removed or altered from any source distribution.
# -------------------------------------------------------------------------------------------------

# Get current script location (all VM implementations are next to it).
d="$(dirname "$0")"
[ "$(printf '%s' "$d" | cut -c1)" = "/" ] || d="$PWD/${d#./}"

# First try using TinyCC to run the C version of the VM implementation.
c="$(which tcc)"; if [ -n "$c" ]; then "$c" -run "$d/bsvm.c" "$@"; exit $?; fi

# Can we use another C compiler?
# TODO(m): This may fail or require user interaction on macOS with Xcode command line tools (since
# they may require the user to accept a license).
if which md5sum >/dev/null; then
    cdir="$HOME/.cache/bs"
    for x in gcc clang cc; do
        c="$(which $x)"
        if [ -n "$c" ]; then
            # Look up cache, and build if necessary.
            e="$cdir/bsvm.c.$x.$(md5sum "$d/bsvm.c" | cut -c1-32)"
            if [ ! -f "$e" ]; then
                mkdir -p "$cdir"
                t="$e.$$"
                "$c" -w -o "$t" "$d/bsvm.c" 2>/dev/null >/dev/null && mv "$t" "$e"
                rm -f "$t"
            fi
            if [ -f "$e" ]; then
                "$e" "$@"
                exit $?
            fi
        fi
    done
fi

# Try scripted VM implementations (in order of preference).
c="$(which python3)"; if [ -n "$c" ]; then "$c" "$d/bsvm.py" "$@"; exit $?; fi
c="$(which python)"; if [ -n "$c" ]; then "$c" "$d/bsvm.py" "$@"; exit $?; fi
c="$(which python2)"; if [ -n "$c" ]; then "$c" "$d/bsvm.py" "$@"; exit $?; fi

c="$(which pwsh)"; if [ -n "$c" ]; then "$c" -noprofile -executionpolicy bypass -file "$d/bsvm.ps1" "$@"; exit $?; fi
c="$(which powershell)"; if [ -n "$c" ]; then "$c" -noprofile -executionpolicy bypass -file "$d/bsvm.ps1" "$@"; exit $?; fi

c="$(which bash)"; if [ -n "$c" ]; then "$c" "$d/bsvm.bash" "$@"; exit $?; fi

# If we got this far, we have no working VM implementation for this system.
echo "***ERROR: No BS VM found"
exit 1
